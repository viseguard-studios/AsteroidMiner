package com.viseguardstudios.asteroid_miner.model;

import com.viseguardstudios.asteroid_miner.skeleton.Logger;

/**
 * Egy-egy j√°rm≈±√©rt (pl. telepes vagy robot) felel≈ës oszt√°ly.
 */
public abstract class Vessel extends Entity {

    /**
     * Default constructor
     */
    public Vessel(Asteroid a) {
        a.Arrive(this);
        currentAsteroid = a;
    }

    /**
     * Ha jelenleg el van b√∫jva az aszteroid√°j√°ban, igaz, ellenkez≈ë esetben hamis.
     */
    private boolean isHidden;

    /**
     * Az aktu√°lis tart√≥zkod√°si hely√©nek (aszteroida) t√°rol√°s√°ra szolg√°l.
     */
    private Asteroid currentAsteroid;

    /**
     * T√°rolja, hogy melyik j√°t√©kos ir√°ny√≠tja az j√°rm≈±vet.
     */
    private Player owner;

    /**
     * Az oszt√°ly konstruktora, be√°ll√≠tja az ≈ët kezel≈ë j√°t√©kost illetve aszteroid√°t.
     * @param p 
     * @param a 
     * @return
     */
    public Vessel Vessel(Player p, Asteroid a) {
        // TODO implement here
        return null;
    }

    /**
     * Beleb√∫jik az adott aszteroid√°ba, ha van benne elegend≈ë hely. Ha nincsen, az aszteroida felsz√≠n√©n marad.
     */
    public void Hide() {

        if(currentAsteroid!= null){
            Logger.log("currentAsteroid.Hide(this)");
            currentAsteroid.Hide(this);
            Logger.returned();

        }
    }

    /**
     * F√∫r egy egys√©gnyit az aszteroida k√∂peny√©b≈ël, ha m√©g nincs teljesen √°tf√∫rva. Ha √°t van f√∫rva, nem t√∂rt√©nik m≈±velet.
     */
    public void Drill() {
        // TODO implement here
    }

    /**
     * Az j√°rm≈± √°tl√©p egy szomsz√©dos aszteroid√°ra.
     * @param to
     */
    public void Move(Asteroid to) {
        // TODO implement here

        Logger.functionCalled("a.ReachableAsteroids()");
        var n = currentAsteroid.ReachableAsteroids();
        Logger.returned();

        Logger.log("Check if n has to: ");
        if(n.contains(to)){
            Logger.log("It has! üéÜ");

            Logger.functionCalled("currentAsteroid.Depart(this);");
            this.currentAsteroid.Depart(this);
            Logger.returned();

            Logger.functionCalled("to.Arrive(this);");
            to.Arrive(this);
            Logger.returned();
        }
        else {
            Logger.log("It doesn't :(");
        }
    }

    /**
     * Absztrakt met√≥dus, lesz√°rmazott√≥l f√ºgg≈ëen m√°s √©rt√©ket ad vissza. Meghat√°rozza, hogy ha az adott j√°rm≈± el szeretne b√∫jni egy aszteroid√°ban, mennyi helyre van hozz√° sz√ºks√©ge.
     * @return
     */
    public abstract int GetHidingSpaceRequirement();

    /**
     * Felrobban  a j√°rm≈± (egy aszteroida robban√°s√°nak hat√°s√°ra).
     */
    public void Explode() {
        // TODO implement here
    }

    /**
     * A j√°rm≈± kib√∫jik az aszteroida magj√°b√≥l, ha el volt b√∫jva benne. Ha nem, nem t√∂rt√©nik m≈±velet.
     */
    public void ExitHiding() {
        // TODO implement here
    }

    /**
     * A jelenlegi aszeroida ezen kereszt√ºl sz√≥l a telep/robot-nak, hogy felrobbant.
     */
    public abstract void AsteroidExploded();

    /**
     * √ñr√∂k√∂lt f√ºggv√©ny. Napvihar eset√©n h√≠v√≥dik meg.
     * Minden v≈±tj√°rm≈± megsemmis√ºl, ha nincs elb√∫jva.
     */
    public void SolarFlare() {
        if(!isHidden){
            Logger.log("this.Die();");
            this.Die();
            Logger.returned();
        }
    }

    /**
     * Akkor h√≠v√≥dik meg, ha az adott k√∂rben m√°r minden j√°t√©kos l√©pett. A robotok ezt haszn√°lj√°k p√©ld√°ul a mozg√°sra.
     * @param closeToSun
     */
    public void RoundEnd(boolean closeToSun) {
        // TODO implement here
    }

    /**
     * Be√°ll√≠tja,hogy melyik j√°t√©kos a tulajdonosa az ≈±rj√°rm≈±nek.
     * @param p
     */
    public void setOwner(Player p){
        owner = p;
    }

    /**
     * Megsemmis√ºl az adott ≈±rj√°rm√∫.
     */
    public void Die(){
    //todo
    }


}